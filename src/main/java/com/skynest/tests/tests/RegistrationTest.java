package com.skynest.tests.tests;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.skynest.tests.files.EndpointConstants;
import com.skynest.tests.files.RegistrationRequest;
import com.skynest.tests.files.RegistrationResponse;
import com.skynest.tests.utils.BaseTransformer;
import io.restassured.RestAssured;
import io.restassured.config.EncoderConfig;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import static io.restassured.RestAssured.given;
import static io.restassured.config.EncoderConfig.encoderConfig;
import static org.apache.http.HttpHeaders.CONTENT_TYPE;
import static org.apache.http.entity.ContentType.APPLICATION_JSON;

public class RegistrationTest extends BaseTest {
    @Test(dataProvider = "UserData")
    void registering_new_valid_user_should_return_specified_response(
            String email,
            String password,
            String name,
            String surname,
            String phoneNumber,
            String address) throws JsonProcessingException {

        RegistrationRequest registrationPayload = new RegistrationRequest(email, password, name, surname, phoneNumber, address);

        Response response =
                given()

                        //.config(RestAssured.config().encoderConfig(((Object) encoderConfig()).encodeContentTypeAs("application json", APIBody)))
                        .log().all().header(CONTENT_TYPE, APPLICATION_JSON)
                         .body(registrationPayload)
                .when()
                         .post(EndpointConstants.REGISTER_PATH);

//        Response response = given().when()
//                .config(RestAssured.config()
//                        .encoderConfig(EncoderConfig.encoderConfig()
//                                .encodeContentTypeAs("application/x-amz-json-1.1", ContentType.JSON)))
//                .post().then().log().all().extract().response();

        RegistrationResponse registrationResponse = response.as(RegistrationResponse.class);

        Assert.assertNotNull(registrationResponse.getId());

        Assert.assertEquals(registrationResponse.getName(), registrationPayload.getName());
        Assert.assertEquals(registrationResponse.getSurname(), registrationPayload.getSurname());
        Assert.assertEquals(registrationResponse.getEmail(), registrationPayload.getEmail());
        Assert.assertEquals(registrationResponse.getPhoneNumber(), registrationPayload.getPhoneNumber());
        Assert.assertEquals(registrationResponse.getAddress(), registrationPayload.getAddress());
    }

    @DataProvider(name = "UserData")
    public Object[][] getUserData() {
        // TODO: 6/6/2022 Change hardcoded values with autogenerated or Delete user after every test;
        return new Object[][]{{"example3@gmail.com", "Example12345", "Example1", "Example1", "10203040500", "Exaample7777"}};
    }
}
